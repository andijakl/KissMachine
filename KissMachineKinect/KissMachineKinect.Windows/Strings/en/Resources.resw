<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="About.Text" xml:space="preserve">
    <value>About</value>
  </data>
  <data name="AboutDevelopedBy.Text" xml:space="preserve">
    <value>Developed by Andreas Jakl</value>
  </data>
  <data name="AboutGitHub.Content" xml:space="preserve">
    <value>Project web site on GitHub</value>
  </data>
  <data name="AboutGitHub.NavigateUri" xml:space="preserve">
    <value>https://github.com/andijakl/KissMachine</value>
  </data>
  <data name="AboutText.Text" xml:space="preserve">
    <value>Kiss Machine</value>
  </data>
  <data name="AboutTwitter.Content" xml:space="preserve">
    <value>Follow on Twitter</value>
  </data>
  <data name="AboutTwitter.NavigateUri" xml:space="preserve">
    <value>https://www.twitter.com/andijakl</value>
  </data>
  <data name="AnotherPhoto_00" xml:space="preserve">
    <value>Ah, you'd like to take another photo? Please wait a little ...</value>
  </data>
  <data name="AnotherPhoto_01" xml:space="preserve">
    <value>Ready for the next photo? Please wait.</value>
  </data>
  <data name="AnotherPhoto_02" xml:space="preserve">
    <value>I think you can do that better. Try again!</value>
  </data>
  <data name="AnotherPhoto_03" xml:space="preserve">
    <value>One more time? Please wait ...</value>
  </data>
  <data name="BusyInitializingKinect" xml:space="preserve">
    <value>Initializing Kinect Sensor ...</value>
  </data>
  <data name="BusyLoading" xml:space="preserve">
    <value>Loading ...</value>
  </data>
  <data name="Description.Text" xml:space="preserve">
    <value>Description</value>
  </data>
  <data name="DescriptionText.Text" xml:space="preserve">
    <value>A completely automated, augmented reality photo booth!
Created for use at weddings and parties.

Each person recognized by the app is marked with a heart in the face. If two persons get close enough together, they are encouraged to give each other a kiss. A countdown starts, after which the app takes a photo. This is stored in your photo library and is also shown on the screen for several seconds.

The app interaction requires no haptic user interface: persons are recognized through the Microsoft Kinect, and the photos are automatically taken in the right moment. The interaction with your guests is done through text-to-speech and on-screen instructions.</value>
  </data>
  <data name="DownloadingPhoto" xml:space="preserve">
    <value>Please wait - transmitting photo ...</value>
  </data>
  <data name="ErrorNoKinectAvailableText" xml:space="preserve">
    <value>No Kinect v2 sensor is available on your system. Make sure the Kinect is connected, powered up and the drivers are installed.</value>
  </data>
  <data name="ErrorNoKinectAvailableTitle" xml:space="preserve">
    <value>Kinect not found</value>
  </data>
  <data name="ErrorSavingPhotoFromKinectText" xml:space="preserve">
    <value>Could not save the photo. Please try again, or if the issue persists, please contact an operator! </value>
  </data>
  <data name="ErrorSavingPhotoFromKinectTitle" xml:space="preserve">
    <value>Error Saving Photo</value>
  </data>
  <data name="GiveAKiss_00" xml:space="preserve">
    <value>Kiss each other!</value>
  </data>
  <data name="GiveAKiss_01" xml:space="preserve">
    <value>Kiss one another!</value>
  </data>
  <data name="GiveAKiss_02" xml:space="preserve">
    <value>Get closer and kiss!</value>
  </data>
  <data name="GiveAKiss_03" xml:space="preserve">
    <value>Give each other a peck!</value>
  </data>
  <data name="GiveAKiss_04" xml:space="preserve">
    <value>What about a kiss?</value>
  </data>
  <data name="GiveAKiss_05" xml:space="preserve">
    <value>I want to see a kiss!</value>
  </data>
  <data name="KissThankYou_00" xml:space="preserve">
    <value>Thank you! I hope you like the photo!</value>
  </data>
  <data name="KissThankYou_01" xml:space="preserve">
    <value>Ah, that's true love - how do you like the photo?</value>
  </data>
  <data name="KissThankYou_02" xml:space="preserve">
    <value>A beautiful kiss! How do you like the photo?</value>
  </data>
  <data name="KissThankYou_03" xml:space="preserve">
    <value>How did you like the kiss? The photo is awesome!</value>
  </data>
  <data name="KissThankYou_04" xml:space="preserve">
    <value>You have set the kiss machine on fire! Here is the photo!</value>
  </data>
  <data name="KissThankYou_05" xml:space="preserve">
    <value>Well, you can do that better. See for yourselves!</value>
  </data>
  <data name="KissThankYou_06" xml:space="preserve">
    <value>Put more love into it. Check out your photo ...</value>
  </data>
  <data name="Kiss_00" xml:space="preserve">
    <value>Kiss!</value>
  </data>
  <data name="Kiss_01" xml:space="preserve">
    <value>Kiss!</value>
  </data>
  <data name="Kiss_02" xml:space="preserve">
    <value>Kiss!</value>
  </data>
  <data name="Kiss_03" xml:space="preserve">
    <value>Kiss!</value>
  </data>
  <data name="MinDistanceText" xml:space="preserve">
    <value>Minimum distance [m]: {0:0.00}</value>
  </data>
  <data name="Privacy.Text" xml:space="preserve">
    <value>Privacy</value>
  </data>
  <data name="PrivacyText.Text" xml:space="preserve">
    <value>The app does not collect any specific usage data. The captured photos are only stored locally on your PC in the photo library. At events, please ensure you have the permission of your guests to take photos. The complete source code of the app is available on GitHub under the open source GPL v3 license.</value>
  </data>
  <data name="RemovedMinPairPlayerHint" xml:space="preserve">
    <value>I can't see you anymore! If you are hugging each other with too much enthusiasm, I sometimes have issues recognizing you.</value>
  </data>
  <data name="ResourceLanguage" xml:space="preserve">
    <value>en</value>
  </data>
  <data name="Settings.Text" xml:space="preserve">
    <value>Settings</value>
  </data>
  <data name="SettingsLowPerformance.Text" xml:space="preserve">
    <value>Low Performance Mode</value>
  </data>
  <data name="SettingsLowPerformanceText.Text" xml:space="preserve">
    <value>Activate on slow PCs. Shows less frames per second. That improves data processing, but results in a slower visual refresh.</value>
  </data>
  <data name="SettingsSony.Text" xml:space="preserve">
    <value>Use Sony Camera</value>
  </data>
  <data name="SettingsSonyText.Text" xml:space="preserve">
    <value>Take the photo with a Sony camera connected to the PC via WiFi Direct (instead of using the Kinect). The camera is completely remote controlled by the app. Tested with the Sony DSC-RX100M3.
Note: restart the app after changing this setting! You still need the Kinect in addition for the live stream and tracking users.

Instructions:
1. Start the Remote Control mode on the camera, e.g., via "Smart Remote Control", "Turn Wi-Fi on" or "Control with Smartphone".
2. Connect the PC to the Wi-Fi of the camera.
3. Start this "Kiss Machine" app.</value>
  </data>
  <data name="SupportedCameras.Content" xml:space="preserve">
    <value>Supported cameras</value>
  </data>
  <data name="SupportedCameras.NavigateUri" xml:space="preserve">
    <value>https://developer.sony.com/develop/cameras/device-support/</value>
  </data>
</root>